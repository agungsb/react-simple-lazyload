import React from 'react';
import PropTypes from 'prop-types';

class ReactSimpleLazyLoad extends React.Component {
  constructor(props) {
    super(props);
    this.styles = props.usecssmodules ?
      require('./ReactSimpleLazyLoad.css') :
      {
        progressive: 'progressive',
        replace: 'replace',
        preview: 'preview',
        reveal: 'reveal'
      }
    this.state = {
      imageLoaded: false,
      imageLoading: false,
      imageState: '',
      pItemClassName: `${this.styles.progressive} ${this.styles.replace}`,
      itemPreviewClassName: `${props.className} ${this.styles.preview}`,
      itemAppendClassName: `${props.className} ${this.styles.reveal}`
    };
    this.init = this._init.bind(this);
  }
  componentDidMount() {
    this.init();
  }
  _init() {
    const pItem = this._pItem;
    let timer;
    const vm = this;
    window.addEventListener('scroll', scroller, false);
    window.addEventListener('resize', scroller, false);
    inView();
    function scroller(e) {
      if (!vm.state.imageLoaded) {
        if (!vm.state.imageLoading) {
          // console.log('loadImage');
          timer = timer || setTimeout(() => {
            timer = null;
            requestAnimationFrame(inView);
            clearTimeout(timer);
          });
        }
      }
    }
    function inView() {
      var wT = window.pageYOffset, wB = wT + window.innerHeight, cRect, pT, pB;
      cRect = pItem.getBoundingClientRect();
      pT = wT + cRect.top;
      pB = pT + cRect.height;
      if (wT < pB && wB > pT) {
        vm.setState({
          imageLoading: true,
          imageState: 'append',
          pItemClassName: vm.styles.progressive
        });
      }
    }
  }
  render() {
    const { full, tiny, className, alt, usecssmodules, ...rest } = this.props;
    let kelas = className;
    if (this.state.imageState === 'append') {
      kelas += this.state.itemAppendClassName;
    }
    return (
      <div
        className={this.state.pItemClassName}
        ref={ref => (this._pItem = ref)}>
        {this.state.imageState !== 'revealed' &&
          <img
            src={tiny}
            alt={alt || ''}
            className={this.state.itemPreviewClassName}
            {...rest} />
        }
        {this.state.imageState !== '' &&
          <img
            src={full}
            onLoad={() => {
              const st = setTimeout(() => {
                this.setState({
                  imageLoaded: true,
                  imageLoading: false,
                  imageState: 'revealed'
                });
                clearTimeout(st);
              }, 300);
            }}
            alt={alt || ''}
            className={kelas}
            {...rest} />
        }
      </div>
    )
  }
}

ReactSimpleLazyLoad.propTypes = {
  className: PropTypes.string,
  full: PropTypes.string.isRequired,
  tiny: PropTypes.string.isRequired,
  style: PropTypes.object,
  usecssmodules: PropTypes.bool
}

ReactSimpleLazyLoad.defaultProps = {
  className: '',
  style: {},
  usecssmodules: false
}

export default ReactSimpleLazyLoad;
